#!/usr/bin/perl -w
#
# Generate the a data-set of internet speeds.
#
# Output is in tsv format, with headers:
#
#   DateTime  Ping  Up  Down  Provider
#
# How:
#   - Runs Ubuntu command-line 'speedtest' on the closest N speedtest providers
#   - Does some minor filtering of a few providers that have issues.
#   - Pretty-prints the results in compact TSV format
#
# To install the prerequisite command-line speedtest on Ubuntu, use:
#   sudo apt-get install speedtest-cli
#
# To read the docs after installation:
#   man speedtest
#
use Getopt::Std;
use vars qw($opt_v);

my $TopN = 20;
my @ServerIds = ();
my %Id2Provider = ();
my %Id2Distance = ();
my %Id2Units = ();
my $MinSuccessPct = 30.0;

#
# Ignore some inconsistent, unreliable (e.g. causing errors) outliers
#
my @UnreliableServers = qw(
    T-Mobile
    SRCC-Networking
    CodecCloudLimited
    Jefferson.Union
    LLHOST.INC\..SRL
);
my $UnreliableServers = sprintf('(%s)', join('|', @UnreliableServers));

sub v {
    return unless ($opt_v);
    if (@_ == 1) {
        print STDERR @_;
    } else {
        printf STDERR @_;
    }
}

sub init {
    # trim program name to its basename
    $0 =~ s{.*/}{};
    getopts('v');
    if (@ARGV && $ARGV[0] =~ /^[0-9.]+$/) {
        $MinSuccessPct = $ARGV[0];
    }
}

sub closest_n_servers($) {
    my $n = shift;
    my @server_ids = ();

    my $good_count = 0;
    open(my $inp, "speedtest --list |");
    while (my $line = <$inp>) {
        next if ($line =~ /$UnreliableServers/o);

        if ($line =~ /^\s*(\d+)\)\s*(.*?) \[([0-9.]+)\s*(\w+)\s*\]/) {
            my ($server_id, $provider, $distance, $units) = ($1, $2, $3, $4);
            $provider =~ s/\s*\([^)]+\)\s*//g;

            push(@server_ids, $server_id);
            $Id2Provider{$server_id} = $provider;
            $Id2Distance{$server_id} = $distance;
            $Id2Units{$server_id} = $units;

            $good_count++;
            v("%s\t%s\t%s %s\n", $server_id, $provider, $distance, $units);
        }
        last if ($good_count >= $n);
    }
    close $inp;
    @server_ids;
}

sub ymd_hm() {
    my $ymd_hm = qx{date '+%Y-%m-%d-%H:%M'};
    chomp($ymd_hm);
    $ymd_hm;
}

sub ping_up_down($) {
    my $server_id = shift;
    my $output = qx{speedtest --server $server_id --simple};
    # '--secure' started failing... 2022
    # my $output = qx{speedtest --secure --server $server_id --simple};
    my ($ping_time)     = ($output =~ /Ping:\s*([0-9.]+)/);
    my ($up_speed)      = ($output =~ /Upload:\s*([0-9.]+)/);
    my ($down_speed)    = ($output =~ /Download:\s*([0-9.]+)/);

    ($output, $ping_time, $up_speed, $down_speed);
}

sub speed_test($) {
    my $server_id = shift;

    if ($server_id !~ /^\d+$/) {
        print STDERR "$0: speed_test: expecting a server_id (int)\n";
        return 0;
    }

    printf STDERR "- %s ...\n", $Id2Provider{$server_id};

    my $ymd_hm = ymd_hm();
    my ($output, $ping, $up_speed, $down_speed) = ping_up_down($server_id);
    unless (defined $down_speed) {
        my $provider = $Id2Provider{$server_id};
        printf STDERR
            "$0: failed to get speedtest data for $provider\n" .
            "Full output from speedtest-cli:\n%s\n", $output;
        return 0;
    }
    my $distance = sprintf " %s %s",
                           $Id2Distance{$server_id},
                           $Id2Units{$server_id};
    my $line = sprintf "%s\t%.02f\t%.02f\t%.02f\t%s %s\n",
            $ymd_hm, $ping, $up_speed, $down_speed,
            $Id2Provider{$server_id}, $distance;

    # To user on terminal:
    if (-t STDERR && ! -t STDOUT) {     # Avoid duplicating data
        print STDERR $line;
    }

    # To data file:
    print STDOUT $line;
    return 1;
}

#
# -- main
#
init();

printf STDERR "Collecting speed data on %u data-centers...\n", $TopN;
printf STDERR "YYYY-MM-DD-HH:MM     Ping(ms) Upload  Download  Provider (Distance)\n";

@ServerIds = closest_n_servers($TopN);
my $success_count = 0;

for my $server_id (@ServerIds) {
    $success_count += speed_test($server_id);
}

my $success_pct = 100.0 * $success_count / scalar(@ServerIds);
printf STDERR
        "speed-test by server success rate: %u/%u = %.2f%%\n",
            $success_count, scalar(@ServerIds), $success_pct;

# exit status == 0 means success in the calling shell,
# so need to invert the condition
exit ($success_pct < $MinSuccessPct);
